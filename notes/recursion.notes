!Notes On Recursion!

- Define what recursion is and how it can be used.
- Understand the two essential components of a recursive function.
- Visualize the call stack to better debug and understand revursice fucntions.
- Use helper method recursion and pure recursion to solve more difficult problems.

What is Recursion? :
- A process(a function in our case) that calls itself.
Why? :
- simple better implentations of many algorithms.
- understanding many implementations of built in functions done recursively
- document.getelementbyid and DOM traversal algorithms
- object traversal
- often used with more complex datastructures 
- sometimes cleaner to iteration
Behind the scenes of recursion:
- in almost all program languages there is a built in data structure that manages what happens when functions are called
The call stack:
- Its a stack data structure 
- any time a function is invoked it is placed on the top ofthe call stack
- when javascript sees the return keybword or when the function ends the compiler will remove(pop)
- function calls get added to the top of the stack as they come in. once fully executed they passs down to the function below.
Two essentials of recursion:
- Base case where recursion will stop
- Different input
- base case when we make it down to 1,0 or some value that makes sense to then iterate backwards over the previous returned value for our solution
!helper method recursion!
- defined as using a recursive helper function within a not necessarily recursive larger base function.
- helper methods can be defined within other functions as subroutines of those functions
!Pure Recursion!
- the primary function itself operates in a recursive manner.
